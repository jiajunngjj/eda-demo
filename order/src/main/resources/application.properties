
# Configures the AMQP broker credentials.
amqp-username=admin
amqp-password=admin

# local vm
%dev.amqp-host=192.168.0.110
%dev.amqp-port=7672

%prod.amqp-host=amqp-svc.eda-demo.svc.cluster.local
%prod.amqp-port=5671

# Configure the AMQP connector to write to the `data-topic` address
%dev.mp.messaging.outgoing.order-new.connector=smallrye-amqp
%dev.mp.messaging.outgoing.order-new.address=order-new
%dev.mp.messaging.outgoing.order-new.durable=true

# Configure the AMQP connector to write to the `new-order` address
%dev.mp.messaging.incoming.order-in-progress.connector=smallrye-amqp
%dev.mp.messaging.incoming.order-in-progress.address=order-in-progress
%dev.mp.messaging.incoming.order-in-progress.durable=true

# Configure the AMQP connector to read from the `order-error` address
%dev.mp.messaging.incoming.order-error.connector=smallrye-amqp
%dev.mp.messaging.incoming.order-error.address=order-error
%dev.mp.messaging.incoming.order-error.durable=true

# Configure the AMQP connector to read from the `order-error` address
%dev.mp.messaging.outgoing.order-error-inv.connector=smallrye-amqp
%dev.mp.messaging.outgoing.order-error-inv.queue=order-error-inv
%dev.mp.messaging.outgoing.order-error-inv.durable=true

# Configure the AMQP connector to read from the `order-new-delivery` address
%dev.mp.messaging.outgoing.order-new-delivery.connector=smallrye-amqp
%dev.mp.messaging.outgoing.order-new-delivery.queue=order-new-delivery
%dev.mp.messaging.outgoing.order-new-delivery.durable=true

# prod
# Configure the AMQP connector to write to the `data-topic` address
%prod.mp.messaging.outgoing.order-new.connector=smallrye-amqp
%prod.mp.messaging.outgoing.order-new.address=order-new
%prod.mp.messaging.outgoing.order-new.durable=false

# Configure the AMQP connector to write to the `new-order` address
%prod.mp.messaging.incoming.order-in-progress.connector=smallrye-amqp
%prod.mp.messaging.incoming.order-in-progress.address=order-in-progress
%prod.mp.messaging.incoming.order-in-progress.durable=false

# Configure the AMQP connector to read from the `order-error` address
%prod.mp.messaging.incoming.order-error.connector=smallrye-amqp
%prod.mp.messaging.incoming.order-error.address=order-error
%prod.mp.messaging.incoming.order-error.durable=false

# Configure the AMQP connector to read from the `order-error` address
%prod.mp.messaging.outgoing.order-error-inv.connector=smallrye-amqp
%prod.mp.messaging.outgoing.order-error-inv.address=order-error-inv
%prod.mp.messaging.outgoing.order-error-inv.durable=false



quarkus.http.cors=true
#quarkus.http.cors.origins=*
quarkus.http.cors.methods=GET,PUT,POST
quarkus.http.cors.headers=X-Custom
quarkus.http.cors.exposed-headers=Content-Disposition
quarkus.http.cors.access-control-max-age=24H

# configure the MongoDB client for a replica set of two nodes
%dev.quarkus.mongodb.connection-string = mongodb://192.168.0.110:27017
# mandatory if you don't specify the name of the database using @MongoEntity
%dev.quarkus.mongodb.database = inventory
#mongodb://[username:password@]host1[:port1][,host2[:port2],…​[,hostN[:portN]]]
%prod.quarkus.mongodb.connection-string = mongodb://admin:admin@mongodb.eda-demo.svc.cluster.local:27017
# mandatory if you don't specify the name of the database using @MongoEntity
%prod.quarkus.mongodb.database = order

%prod.quarkus.vertx.event-loops-pool-size=30
%prod.quarkus.vertx.max-event-loop-execute-time=PT5S
%prod.quarkus.vertx.warning-exception-time=PT5S


# configure your datasource

%prod.quarkus.datasource.db-kind = mysql
%prod.quarkus.datasource.username = demouser
%prod.quarkus.datasource.password = passw0rd
%prod.quarkus.datasource.jdbc.url = jdbc:mysql://mysql-order.eda-demo.svc.cluster.local:3306/demodb
%prod.quarkus.hibernate-orm.database.generation = drop-and-create


%dev.quarkus.datasource.db-kind = mysql
%dev.quarkus.datasource.username = demouser
%dev.quarkus.datasource.password = Passw%0rd
%dev.quarkus.datasource.jdbc.url = jdbc:mysql://192.168.0.110:3306/demodb
%dev.quarkus.hibernate-orm.database.generation = drop-and-create
